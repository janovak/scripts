#!/bin/bash

# Define the services you want to manage
SERVICES=(
    "rate_limiter_service.py"
    "chat_listener_service.py"
    "twitch_polling_service.py"
    "anomaly_detection_service.py"
    "clip_creation_service.py"
)

# Get the command passed as a first argument
COMMAND=$1

# Function to start services
start_services() {
    for service in "${SERVICES[@]}"; do
        echo "Starting $service..."
        start_service "$service"
    done
}

# Function to stop services
stop_services() {
    for service in "${SERVICES[@]}"; do
        echo "Stopping $service..."
        stop_service "$service"
    done
}

purge_queues() {
    echo "Purging all RabbitMQ queues..."

    # Store the queue names in a variable
    queues=$(sudo rabbitmqctl list_queues | awk '{print $COMMAND' | grep -v 'Timeout:\|Listing\|name')

    # Loop through each queue and purge it
    for queue in $queues; do
        echo "Purging queue: $queue"
        sudo rabbitmqctl purge_queue "$queue"
    done
}

# Check if the command is "start" or "restart" to include the working directory
if [[ $COMMAND == "start" || $COMMAND == "restart" ]]; then
    WORKING_DIR=$2
    if [[ -z "$WORKING_DIR" ]]; then
        echo "Usage: $0 {start|stop|restart} /path/to/working_directory"
        exit 1
    fi
    # Change to the working directory
    cd "$WORKING_DIR" || { echo "Failed to change directory to $WORKING_DIR"; exit 1; }
fi

# Main script logic
if [[ $COMMAND == "start" ]]; then
    start_services
elif [[ $COMMAND == "stop" ]]; then
    stop_services
elif [[ $COMMAND == "purge_queues" ]]; then
    purge_queues
elif [[ $COMMAND == "restart" ]]; then
    stop_services
    purge_queues
    start_services
else
    echo "Usage: $0 {start|stop|restart|purge_queues}"
    exit 1
fi

